// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Googleinterestovertime is an object representing the database table.
type Googleinterestovertime struct {
	ID                int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Geo               string    `boil:"geo" json:"geo" toml:"geo" yaml:"geo"`
	FormattedTime     string    `boil:"formatted_time" json:"formatted_time" toml:"formatted_time" yaml:"formatted_time"`
	FormattedAxisTime string    `boil:"formatted_axis_time" json:"formatted_axis_time" toml:"formatted_axis_time" yaml:"formatted_axis_time"`
	Value             int       `boil:"value" json:"value" toml:"value" yaml:"value"`
	Keyword           string    `boil:"keyword" json:"keyword" toml:"keyword" yaml:"keyword"`
	Date              time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`

	R *googleinterestovertimeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L googleinterestovertimeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GoogleinterestovertimeColumns = struct {
	ID                string
	Geo               string
	FormattedTime     string
	FormattedAxisTime string
	Value             string
	Keyword           string
	Date              string
}{
	ID:                "id",
	Geo:               "geo",
	FormattedTime:     "formatted_time",
	FormattedAxisTime: "formatted_axis_time",
	Value:             "value",
	Keyword:           "keyword",
	Date:              "date",
}

// Generated where

var GoogleinterestovertimeWhere = struct {
	ID                whereHelperint
	Geo               whereHelperstring
	FormattedTime     whereHelperstring
	FormattedAxisTime whereHelperstring
	Value             whereHelperint
	Keyword           whereHelperstring
	Date              whereHelpertime_Time
}{
	ID:                whereHelperint{field: "\"googleinterestovertime\".\"id\""},
	Geo:               whereHelperstring{field: "\"googleinterestovertime\".\"geo\""},
	FormattedTime:     whereHelperstring{field: "\"googleinterestovertime\".\"formatted_time\""},
	FormattedAxisTime: whereHelperstring{field: "\"googleinterestovertime\".\"formatted_axis_time\""},
	Value:             whereHelperint{field: "\"googleinterestovertime\".\"value\""},
	Keyword:           whereHelperstring{field: "\"googleinterestovertime\".\"keyword\""},
	Date:              whereHelpertime_Time{field: "\"googleinterestovertime\".\"date\""},
}

// GoogleinterestovertimeRels is where relationship names are stored.
var GoogleinterestovertimeRels = struct {
}{}

// googleinterestovertimeR is where relationships are stored.
type googleinterestovertimeR struct {
}

// NewStruct creates a new relationship struct
func (*googleinterestovertimeR) NewStruct() *googleinterestovertimeR {
	return &googleinterestovertimeR{}
}

// googleinterestovertimeL is where Load methods for each relationship are stored.
type googleinterestovertimeL struct{}

var (
	googleinterestovertimeAllColumns            = []string{"id", "geo", "formatted_time", "formatted_axis_time", "value", "keyword", "date"}
	googleinterestovertimeColumnsWithoutDefault = []string{"geo", "formatted_time", "formatted_axis_time", "value", "keyword", "date"}
	googleinterestovertimeColumnsWithDefault    = []string{"id"}
	googleinterestovertimePrimaryKeyColumns     = []string{"id"}
)

type (
	// GoogleinterestovertimeSlice is an alias for a slice of pointers to Googleinterestovertime.
	// This should generally be used opposed to []Googleinterestovertime.
	GoogleinterestovertimeSlice []*Googleinterestovertime

	googleinterestovertimeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	googleinterestovertimeType                 = reflect.TypeOf(&Googleinterestovertime{})
	googleinterestovertimeMapping              = queries.MakeStructMapping(googleinterestovertimeType)
	googleinterestovertimePrimaryKeyMapping, _ = queries.BindMapping(googleinterestovertimeType, googleinterestovertimeMapping, googleinterestovertimePrimaryKeyColumns)
	googleinterestovertimeInsertCacheMut       sync.RWMutex
	googleinterestovertimeInsertCache          = make(map[string]insertCache)
	googleinterestovertimeUpdateCacheMut       sync.RWMutex
	googleinterestovertimeUpdateCache          = make(map[string]updateCache)
	googleinterestovertimeUpsertCacheMut       sync.RWMutex
	googleinterestovertimeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single googleinterestovertime record from the query.
func (q googleinterestovertimeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Googleinterestovertime, error) {
	o := &Googleinterestovertime{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for googleinterestovertime")
	}

	return o, nil
}

// All returns all Googleinterestovertime records from the query.
func (q googleinterestovertimeQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoogleinterestovertimeSlice, error) {
	var o []*Googleinterestovertime

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Googleinterestovertime slice")
	}

	return o, nil
}

// Count returns the count of all Googleinterestovertime records in the query.
func (q googleinterestovertimeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count googleinterestovertime rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q googleinterestovertimeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if googleinterestovertime exists")
	}

	return count > 0, nil
}

// Googleinterestovertimes retrieves all the records using an executor.
func Googleinterestovertimes(mods ...qm.QueryMod) googleinterestovertimeQuery {
	mods = append(mods, qm.From("\"googleinterestovertime\""))
	return googleinterestovertimeQuery{NewQuery(mods...)}
}

// FindGoogleinterestovertime retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGoogleinterestovertime(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Googleinterestovertime, error) {
	googleinterestovertimeObj := &Googleinterestovertime{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"googleinterestovertime\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, googleinterestovertimeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from googleinterestovertime")
	}

	return googleinterestovertimeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Googleinterestovertime) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no googleinterestovertime provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(googleinterestovertimeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	googleinterestovertimeInsertCacheMut.RLock()
	cache, cached := googleinterestovertimeInsertCache[key]
	googleinterestovertimeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			googleinterestovertimeAllColumns,
			googleinterestovertimeColumnsWithDefault,
			googleinterestovertimeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(googleinterestovertimeType, googleinterestovertimeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(googleinterestovertimeType, googleinterestovertimeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"googleinterestovertime\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"googleinterestovertime\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into googleinterestovertime")
	}

	if !cached {
		googleinterestovertimeInsertCacheMut.Lock()
		googleinterestovertimeInsertCache[key] = cache
		googleinterestovertimeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Googleinterestovertime.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Googleinterestovertime) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	googleinterestovertimeUpdateCacheMut.RLock()
	cache, cached := googleinterestovertimeUpdateCache[key]
	googleinterestovertimeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			googleinterestovertimeAllColumns,
			googleinterestovertimePrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update googleinterestovertime, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"googleinterestovertime\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, googleinterestovertimePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(googleinterestovertimeType, googleinterestovertimeMapping, append(wl, googleinterestovertimePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update googleinterestovertime row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for googleinterestovertime")
	}

	if !cached {
		googleinterestovertimeUpdateCacheMut.Lock()
		googleinterestovertimeUpdateCache[key] = cache
		googleinterestovertimeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q googleinterestovertimeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for googleinterestovertime")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for googleinterestovertime")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GoogleinterestovertimeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googleinterestovertimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"googleinterestovertime\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, googleinterestovertimePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in googleinterestovertime slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all googleinterestovertime")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Googleinterestovertime) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no googleinterestovertime provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(googleinterestovertimeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	googleinterestovertimeUpsertCacheMut.RLock()
	cache, cached := googleinterestovertimeUpsertCache[key]
	googleinterestovertimeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			googleinterestovertimeAllColumns,
			googleinterestovertimeColumnsWithDefault,
			googleinterestovertimeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			googleinterestovertimeAllColumns,
			googleinterestovertimePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert googleinterestovertime, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(googleinterestovertimePrimaryKeyColumns))
			copy(conflict, googleinterestovertimePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"googleinterestovertime\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(googleinterestovertimeType, googleinterestovertimeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(googleinterestovertimeType, googleinterestovertimeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert googleinterestovertime")
	}

	if !cached {
		googleinterestovertimeUpsertCacheMut.Lock()
		googleinterestovertimeUpsertCache[key] = cache
		googleinterestovertimeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Googleinterestovertime record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Googleinterestovertime) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Googleinterestovertime provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), googleinterestovertimePrimaryKeyMapping)
	sql := "DELETE FROM \"googleinterestovertime\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from googleinterestovertime")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for googleinterestovertime")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q googleinterestovertimeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no googleinterestovertimeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from googleinterestovertime")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for googleinterestovertime")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GoogleinterestovertimeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googleinterestovertimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"googleinterestovertime\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, googleinterestovertimePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from googleinterestovertime slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for googleinterestovertime")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Googleinterestovertime) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGoogleinterestovertime(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoogleinterestovertimeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GoogleinterestovertimeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googleinterestovertimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"googleinterestovertime\".* FROM \"googleinterestovertime\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, googleinterestovertimePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GoogleinterestovertimeSlice")
	}

	*o = slice

	return nil
}

// GoogleinterestovertimeExists checks if the Googleinterestovertime row exists.
func GoogleinterestovertimeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"googleinterestovertime\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if googleinterestovertime exists")
	}

	return exists, nil
}
