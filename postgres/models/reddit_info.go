// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// RedditInfo is an object representing the database table.
type RedditInfo struct {
	Date           time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`
	Subscribers    int       `boil:"subscribers" json:"subscribers" toml:"subscribers" yaml:"subscribers"`
	AccountsActive int       `boil:"accounts_active" json:"accounts_active" toml:"accounts_active" yaml:"accounts_active"`

	R *redditInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L redditInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RedditInfoColumns = struct {
	Date           string
	Subscribers    string
	AccountsActive string
}{
	Date:           "date",
	Subscribers:    "subscribers",
	AccountsActive: "accounts_active",
}

// Generated where

var RedditInfoWhere = struct {
	Date           whereHelpertime_Time
	Subscribers    whereHelperint
	AccountsActive whereHelperint
}{
	Date:           whereHelpertime_Time{field: "\"reddit_info\".\"date\""},
	Subscribers:    whereHelperint{field: "\"reddit_info\".\"subscribers\""},
	AccountsActive: whereHelperint{field: "\"reddit_info\".\"accounts_active\""},
}

// RedditInfoRels is where relationship names are stored.
var RedditInfoRels = struct {
}{}

// redditInfoR is where relationships are stored.
type redditInfoR struct {
}

// NewStruct creates a new relationship struct
func (*redditInfoR) NewStruct() *redditInfoR {
	return &redditInfoR{}
}

// redditInfoL is where Load methods for each relationship are stored.
type redditInfoL struct{}

var (
	redditInfoAllColumns            = []string{"date", "subscribers", "accounts_active"}
	redditInfoColumnsWithoutDefault = []string{"date", "subscribers", "accounts_active"}
	redditInfoColumnsWithDefault    = []string{}
	redditInfoPrimaryKeyColumns     = []string{"date"}
)

type (
	// RedditInfoSlice is an alias for a slice of pointers to RedditInfo.
	// This should generally be used opposed to []RedditInfo.
	RedditInfoSlice []*RedditInfo

	redditInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	redditInfoType                 = reflect.TypeOf(&RedditInfo{})
	redditInfoMapping              = queries.MakeStructMapping(redditInfoType)
	redditInfoPrimaryKeyMapping, _ = queries.BindMapping(redditInfoType, redditInfoMapping, redditInfoPrimaryKeyColumns)
	redditInfoInsertCacheMut       sync.RWMutex
	redditInfoInsertCache          = make(map[string]insertCache)
	redditInfoUpdateCacheMut       sync.RWMutex
	redditInfoUpdateCache          = make(map[string]updateCache)
	redditInfoUpsertCacheMut       sync.RWMutex
	redditInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single redditInfo record from the query.
func (q redditInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RedditInfo, error) {
	o := &RedditInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reddit_info")
	}

	return o, nil
}

// All returns all RedditInfo records from the query.
func (q redditInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (RedditInfoSlice, error) {
	var o []*RedditInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RedditInfo slice")
	}

	return o, nil
}

// Count returns the count of all RedditInfo records in the query.
func (q redditInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reddit_info rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q redditInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reddit_info exists")
	}

	return count > 0, nil
}

// RedditInfos retrieves all the records using an executor.
func RedditInfos(mods ...qm.QueryMod) redditInfoQuery {
	mods = append(mods, qm.From("\"reddit_info\""))
	return redditInfoQuery{NewQuery(mods...)}
}

// FindRedditInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRedditInfo(ctx context.Context, exec boil.ContextExecutor, date time.Time, selectCols ...string) (*RedditInfo, error) {
	redditInfoObj := &RedditInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"reddit_info\" where \"date\"=$1", sel,
	)

	q := queries.Raw(query, date)

	err := q.Bind(ctx, exec, redditInfoObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reddit_info")
	}

	return redditInfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RedditInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reddit_info provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(redditInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	redditInfoInsertCacheMut.RLock()
	cache, cached := redditInfoInsertCache[key]
	redditInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			redditInfoAllColumns,
			redditInfoColumnsWithDefault,
			redditInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(redditInfoType, redditInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(redditInfoType, redditInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"reddit_info\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"reddit_info\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reddit_info")
	}

	if !cached {
		redditInfoInsertCacheMut.Lock()
		redditInfoInsertCache[key] = cache
		redditInfoInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the RedditInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RedditInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	redditInfoUpdateCacheMut.RLock()
	cache, cached := redditInfoUpdateCache[key]
	redditInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			redditInfoAllColumns,
			redditInfoPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reddit_info, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"reddit_info\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, redditInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(redditInfoType, redditInfoMapping, append(wl, redditInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reddit_info row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reddit_info")
	}

	if !cached {
		redditInfoUpdateCacheMut.Lock()
		redditInfoUpdateCache[key] = cache
		redditInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q redditInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reddit_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reddit_info")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RedditInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), redditInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"reddit_info\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, redditInfoPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in redditInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all redditInfo")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RedditInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reddit_info provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(redditInfoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	redditInfoUpsertCacheMut.RLock()
	cache, cached := redditInfoUpsertCache[key]
	redditInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			redditInfoAllColumns,
			redditInfoColumnsWithDefault,
			redditInfoColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			redditInfoAllColumns,
			redditInfoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert reddit_info, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(redditInfoPrimaryKeyColumns))
			copy(conflict, redditInfoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"reddit_info\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(redditInfoType, redditInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(redditInfoType, redditInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert reddit_info")
	}

	if !cached {
		redditInfoUpsertCacheMut.Lock()
		redditInfoUpsertCache[key] = cache
		redditInfoUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single RedditInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RedditInfo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RedditInfo provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), redditInfoPrimaryKeyMapping)
	sql := "DELETE FROM \"reddit_info\" WHERE \"date\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reddit_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reddit_info")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q redditInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no redditInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reddit_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reddit_info")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RedditInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), redditInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"reddit_info\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, redditInfoPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from redditInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reddit_info")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RedditInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRedditInfo(ctx, exec, o.Date)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RedditInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RedditInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), redditInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"reddit_info\".* FROM \"reddit_info\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, redditInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RedditInfoSlice")
	}

	*o = slice

	return nil
}

// RedditInfoExists checks if the RedditInfo row exists.
func RedditInfoExists(ctx context.Context, exec boil.ContextExecutor, date time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"reddit_info\" where \"date\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, date)
	}

	row := exec.QueryRowContext(ctx, sql, date)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reddit_info exists")
	}

	return exists, nil
}
