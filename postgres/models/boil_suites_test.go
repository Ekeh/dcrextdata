// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Exchanges", testExchanges)
	t.Run("ExchangeTicks", testExchangeTicks)
	t.Run("Mempools", testMempools)
	t.Run("PowData", testPowData)
	t.Run("VSPS", testVSPS)
	t.Run("VSPTicks", testVSPTicks)
}

func TestDelete(t *testing.T) {
	t.Run("Exchanges", testExchangesDelete)
	t.Run("ExchangeTicks", testExchangeTicksDelete)
	t.Run("Mempools", testMempoolsDelete)
	t.Run("PowData", testPowDataDelete)
	t.Run("VSPS", testVSPSDelete)
	t.Run("VSPTicks", testVSPTicksDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Exchanges", testExchangesQueryDeleteAll)
	t.Run("ExchangeTicks", testExchangeTicksQueryDeleteAll)
	t.Run("Mempools", testMempoolsQueryDeleteAll)
	t.Run("PowData", testPowDataQueryDeleteAll)
	t.Run("VSPS", testVSPSQueryDeleteAll)
	t.Run("VSPTicks", testVSPTicksQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Exchanges", testExchangesSliceDeleteAll)
	t.Run("ExchangeTicks", testExchangeTicksSliceDeleteAll)
	t.Run("Mempools", testMempoolsSliceDeleteAll)
	t.Run("PowData", testPowDataSliceDeleteAll)
	t.Run("VSPS", testVSPSSliceDeleteAll)
	t.Run("VSPTicks", testVSPTicksSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Exchanges", testExchangesExists)
	t.Run("ExchangeTicks", testExchangeTicksExists)
	t.Run("Mempools", testMempoolsExists)
	t.Run("PowData", testPowDataExists)
	t.Run("VSPS", testVSPSExists)
	t.Run("VSPTicks", testVSPTicksExists)
}

func TestFind(t *testing.T) {
	t.Run("Exchanges", testExchangesFind)
	t.Run("ExchangeTicks", testExchangeTicksFind)
	t.Run("Mempools", testMempoolsFind)
	t.Run("PowData", testPowDataFind)
	t.Run("VSPS", testVSPSFind)
	t.Run("VSPTicks", testVSPTicksFind)
}

func TestBind(t *testing.T) {
	t.Run("Exchanges", testExchangesBind)
	t.Run("ExchangeTicks", testExchangeTicksBind)
	t.Run("Mempools", testMempoolsBind)
	t.Run("PowData", testPowDataBind)
	t.Run("VSPS", testVSPSBind)
	t.Run("VSPTicks", testVSPTicksBind)
}

func TestOne(t *testing.T) {
	t.Run("Exchanges", testExchangesOne)
	t.Run("ExchangeTicks", testExchangeTicksOne)
	t.Run("Mempools", testMempoolsOne)
	t.Run("PowData", testPowDataOne)
	t.Run("VSPS", testVSPSOne)
	t.Run("VSPTicks", testVSPTicksOne)
}

func TestAll(t *testing.T) {
	t.Run("Exchanges", testExchangesAll)
	t.Run("ExchangeTicks", testExchangeTicksAll)
	t.Run("Mempools", testMempoolsAll)
	t.Run("PowData", testPowDataAll)
	t.Run("VSPS", testVSPSAll)
	t.Run("VSPTicks", testVSPTicksAll)
}

func TestCount(t *testing.T) {
	t.Run("Exchanges", testExchangesCount)
	t.Run("ExchangeTicks", testExchangeTicksCount)
	t.Run("Mempools", testMempoolsCount)
	t.Run("PowData", testPowDataCount)
	t.Run("VSPS", testVSPSCount)
	t.Run("VSPTicks", testVSPTicksCount)
}

func TestInsert(t *testing.T) {
	t.Run("Exchanges", testExchangesInsert)
	t.Run("Exchanges", testExchangesInsertWhitelist)
	t.Run("ExchangeTicks", testExchangeTicksInsert)
	t.Run("ExchangeTicks", testExchangeTicksInsertWhitelist)
	t.Run("Mempools", testMempoolsInsert)
	t.Run("Mempools", testMempoolsInsertWhitelist)
	t.Run("PowData", testPowDataInsert)
	t.Run("PowData", testPowDataInsertWhitelist)
	t.Run("VSPS", testVSPSInsert)
	t.Run("VSPS", testVSPSInsertWhitelist)
	t.Run("VSPTicks", testVSPTicksInsert)
	t.Run("VSPTicks", testVSPTicksInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ExchangeTickToExchangeUsingExchange", testExchangeTickToOneExchangeUsingExchange)
	t.Run("VSPTickToVSPUsingVSP", testVSPTickToOneVSPUsingVSP)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ExchangeToExchangeTicks", testExchangeToManyExchangeTicks)
	t.Run("VSPToVSPTicks", testVSPToManyVSPTicks)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ExchangeTickToExchangeUsingExchangeTicks", testExchangeTickToOneSetOpExchangeUsingExchange)
	t.Run("VSPTickToVSPUsingVSPTicks", testVSPTickToOneSetOpVSPUsingVSP)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ExchangeToExchangeTicks", testExchangeToManyAddOpExchangeTicks)
	t.Run("VSPToVSPTicks", testVSPToManyAddOpVSPTicks)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Exchanges", testExchangesReload)
	t.Run("ExchangeTicks", testExchangeTicksReload)
	t.Run("Mempools", testMempoolsReload)
	t.Run("PowData", testPowDataReload)
	t.Run("VSPS", testVSPSReload)
	t.Run("VSPTicks", testVSPTicksReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Exchanges", testExchangesReloadAll)
	t.Run("ExchangeTicks", testExchangeTicksReloadAll)
	t.Run("Mempools", testMempoolsReloadAll)
	t.Run("PowData", testPowDataReloadAll)
	t.Run("VSPS", testVSPSReloadAll)
	t.Run("VSPTicks", testVSPTicksReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Exchanges", testExchangesSelect)
	t.Run("ExchangeTicks", testExchangeTicksSelect)
	t.Run("Mempools", testMempoolsSelect)
	t.Run("PowData", testPowDataSelect)
	t.Run("VSPS", testVSPSSelect)
	t.Run("VSPTicks", testVSPTicksSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Exchanges", testExchangesUpdate)
	t.Run("ExchangeTicks", testExchangeTicksUpdate)
	t.Run("Mempools", testMempoolsUpdate)
	t.Run("PowData", testPowDataUpdate)
	t.Run("VSPS", testVSPSUpdate)
	t.Run("VSPTicks", testVSPTicksUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Exchanges", testExchangesSliceUpdateAll)
	t.Run("ExchangeTicks", testExchangeTicksSliceUpdateAll)
	t.Run("Mempools", testMempoolsSliceUpdateAll)
	t.Run("PowData", testPowDataSliceUpdateAll)
	t.Run("VSPS", testVSPSSliceUpdateAll)
	t.Run("VSPTicks", testVSPTicksSliceUpdateAll)
}
