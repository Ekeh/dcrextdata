// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVSPTickTimes(t *testing.T) {
	t.Parallel()

	query := VSPTickTimes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVSPTickTimesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VSPTickTime{}
	if err = randomize.Struct(seed, o, vspTickTimeDBTypes, true, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VSPTickTimes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVSPTickTimesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VSPTickTime{}
	if err = randomize.Struct(seed, o, vspTickTimeDBTypes, true, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := VSPTickTimes().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VSPTickTimes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVSPTickTimesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VSPTickTime{}
	if err = randomize.Struct(seed, o, vspTickTimeDBTypes, true, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VSPTickTimeSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VSPTickTimes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVSPTickTimesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VSPTickTime{}
	if err = randomize.Struct(seed, o, vspTickTimeDBTypes, true, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VSPTickTimeExists(tx, o.VSPTickID, o.UpdateTime)
	if err != nil {
		t.Errorf("Unable to check if VSPTickTime exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VSPTickTimeExists to return true, but got false.")
	}
}

func testVSPTickTimesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VSPTickTime{}
	if err = randomize.Struct(seed, o, vspTickTimeDBTypes, true, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	vspTickTimeFound, err := FindVSPTickTime(tx, o.VSPTickID, o.UpdateTime)
	if err != nil {
		t.Error(err)
	}

	if vspTickTimeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVSPTickTimesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VSPTickTime{}
	if err = randomize.Struct(seed, o, vspTickTimeDBTypes, true, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = VSPTickTimes().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testVSPTickTimesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VSPTickTime{}
	if err = randomize.Struct(seed, o, vspTickTimeDBTypes, true, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := VSPTickTimes().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVSPTickTimesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vspTickTimeOne := &VSPTickTime{}
	vspTickTimeTwo := &VSPTickTime{}
	if err = randomize.Struct(seed, vspTickTimeOne, vspTickTimeDBTypes, false, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}
	if err = randomize.Struct(seed, vspTickTimeTwo, vspTickTimeDBTypes, false, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = vspTickTimeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = vspTickTimeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VSPTickTimes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVSPTickTimesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	vspTickTimeOne := &VSPTickTime{}
	vspTickTimeTwo := &VSPTickTime{}
	if err = randomize.Struct(seed, vspTickTimeOne, vspTickTimeDBTypes, false, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}
	if err = randomize.Struct(seed, vspTickTimeTwo, vspTickTimeDBTypes, false, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = vspTickTimeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = vspTickTimeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VSPTickTimes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testVSPTickTimesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VSPTickTime{}
	if err = randomize.Struct(seed, o, vspTickTimeDBTypes, true, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VSPTickTimes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVSPTickTimesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VSPTickTime{}
	if err = randomize.Struct(seed, o, vspTickTimeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(vspTickTimeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := VSPTickTimes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVSPTickTimeToOneVSPTickUsingVSPTick(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local VSPTickTime
	var foreign VSPTick

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, vspTickTimeDBTypes, false, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, vspTickDBTypes, false, vspTickColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTick struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.VSPTickID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.VSPTick().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := VSPTickTimeSlice{&local}
	if err = local.L.LoadVSPTick(tx, false, (*[]*VSPTickTime)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.VSPTick == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.VSPTick = nil
	if err = local.L.LoadVSPTick(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.VSPTick == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVSPTickTimeToOneSetOpVSPTickUsingVSPTick(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a VSPTickTime
	var b, c VSPTick

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, vspTickTimeDBTypes, false, strmangle.SetComplement(vspTickTimePrimaryKeyColumns, vspTickTimeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, vspTickDBTypes, false, strmangle.SetComplement(vspTickPrimaryKeyColumns, vspTickColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, vspTickDBTypes, false, strmangle.SetComplement(vspTickPrimaryKeyColumns, vspTickColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*VSPTick{&b, &c} {
		err = a.SetVSPTick(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.VSPTick != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VSPTickTimes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.VSPTickID != x.ID {
			t.Error("foreign key was wrong value", a.VSPTickID)
		}

		if exists, err := VSPTickTimeExists(tx, a.VSPTickID, a.UpdateTime); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testVSPTickTimesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VSPTickTime{}
	if err = randomize.Struct(seed, o, vspTickTimeDBTypes, true, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testVSPTickTimesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VSPTickTime{}
	if err = randomize.Struct(seed, o, vspTickTimeDBTypes, true, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VSPTickTimeSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testVSPTickTimesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VSPTickTime{}
	if err = randomize.Struct(seed, o, vspTickTimeDBTypes, true, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VSPTickTimes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	vspTickTimeDBTypes = map[string]string{`VSPTickID`: `integer`, `UpdateTime`: `timestamp with time zone`}
	_                  = bytes.MinRead
)

func testVSPTickTimesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(vspTickTimePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(vspTickTimeColumns) == len(vspTickTimePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VSPTickTime{}
	if err = randomize.Struct(seed, o, vspTickTimeDBTypes, true, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VSPTickTimes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, vspTickTimeDBTypes, true, vspTickTimePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVSPTickTimesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(vspTickTimeColumns) == len(vspTickTimePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VSPTickTime{}
	if err = randomize.Struct(seed, o, vspTickTimeDBTypes, true, vspTickTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VSPTickTimes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, vspTickTimeDBTypes, true, vspTickTimePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(vspTickTimeColumns, vspTickTimePrimaryKeyColumns) {
		fields = vspTickTimeColumns
	} else {
		fields = strmangle.SetComplement(
			vspTickTimeColumns,
			vspTickTimePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VSPTickTimeSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVSPTickTimesUpsert(t *testing.T) {
	t.Parallel()

	if len(vspTickTimeColumns) == len(vspTickTimePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := VSPTickTime{}
	if err = randomize.Struct(seed, &o, vspTickTimeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VSPTickTime: %s", err)
	}

	count, err := VSPTickTimes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, vspTickTimeDBTypes, false, vspTickTimePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VSPTickTime struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VSPTickTime: %s", err)
	}

	count, err = VSPTickTimes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
