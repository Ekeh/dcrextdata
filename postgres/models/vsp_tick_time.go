// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// VSPTickTime is an object representing the database table.
type VSPTickTime struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	VSPTickID  int       `boil:"vsp_tick_id" json:"vsp_tick_id" toml:"vsp_tick_id" yaml:"vsp_tick_id"`
	UpdateTime time.Time `boil:"update_time" json:"update_time" toml:"update_time" yaml:"update_time"`

	R *vspTickTimeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vspTickTimeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VSPTickTimeColumns = struct {
	ID         string
	VSPTickID  string
	UpdateTime string
}{
	ID:         "id",
	VSPTickID:  "vsp_tick_id",
	UpdateTime: "update_time",
}

// Generated where

var VSPTickTimeWhere = struct {
	ID         whereHelperint
	VSPTickID  whereHelperint
	UpdateTime whereHelpertime_Time
}{
	ID:         whereHelperint{field: `id`},
	VSPTickID:  whereHelperint{field: `vsp_tick_id`},
	UpdateTime: whereHelpertime_Time{field: `update_time`},
}

// VSPTickTimeRels is where relationship names are stored.
var VSPTickTimeRels = struct {
	VSPTick string
}{
	VSPTick: "VSPTick",
}

// vspTickTimeR is where relationships are stored.
type vspTickTimeR struct {
	VSPTick *VSPTick
}

// NewStruct creates a new relationship struct
func (*vspTickTimeR) NewStruct() *vspTickTimeR {
	return &vspTickTimeR{}
}

// vspTickTimeL is where Load methods for each relationship are stored.
type vspTickTimeL struct{}

var (
	vspTickTimeColumns               = []string{"id", "vsp_tick_id", "update_time"}
	vspTickTimeColumnsWithoutDefault = []string{"vsp_tick_id", "update_time"}
	vspTickTimeColumnsWithDefault    = []string{"id"}
	vspTickTimePrimaryKeyColumns     = []string{"id"}
)

type (
	// VSPTickTimeSlice is an alias for a slice of pointers to VSPTickTime.
	// This should generally be used opposed to []VSPTickTime.
	VSPTickTimeSlice []*VSPTickTime

	vspTickTimeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vspTickTimeType                 = reflect.TypeOf(&VSPTickTime{})
	vspTickTimeMapping              = queries.MakeStructMapping(vspTickTimeType)
	vspTickTimePrimaryKeyMapping, _ = queries.BindMapping(vspTickTimeType, vspTickTimeMapping, vspTickTimePrimaryKeyColumns)
	vspTickTimeInsertCacheMut       sync.RWMutex
	vspTickTimeInsertCache          = make(map[string]insertCache)
	vspTickTimeUpdateCacheMut       sync.RWMutex
	vspTickTimeUpdateCache          = make(map[string]updateCache)
	vspTickTimeUpsertCacheMut       sync.RWMutex
	vspTickTimeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single vspTickTime record from the query.
func (q vspTickTimeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VSPTickTime, error) {
	o := &VSPTickTime{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vsp_tick_time")
	}

	return o, nil
}

// All returns all VSPTickTime records from the query.
func (q vspTickTimeQuery) All(ctx context.Context, exec boil.ContextExecutor) (VSPTickTimeSlice, error) {
	var o []*VSPTickTime

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VSPTickTime slice")
	}

	return o, nil
}

// Count returns the count of all VSPTickTime records in the query.
func (q vspTickTimeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vsp_tick_time rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vspTickTimeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vsp_tick_time exists")
	}

	return count > 0, nil
}

// VSPTick pointed to by the foreign key.
func (o *VSPTickTime) VSPTick(mods ...qm.QueryMod) vspTickQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.VSPTickID),
	}

	queryMods = append(queryMods, mods...)

	query := VSPTicks(queryMods...)
	queries.SetFrom(query.Query, "\"vsp_tick\"")

	return query
}

// LoadVSPTick allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vspTickTimeL) LoadVSPTick(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVSPTickTime interface{}, mods queries.Applicator) error {
	var slice []*VSPTickTime
	var object *VSPTickTime

	if singular {
		object = maybeVSPTickTime.(*VSPTickTime)
	} else {
		slice = *maybeVSPTickTime.(*[]*VSPTickTime)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vspTickTimeR{}
		}
		args = append(args, object.VSPTickID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vspTickTimeR{}
			}

			for _, a := range args {
				if a == obj.VSPTickID {
					continue Outer
				}
			}

			args = append(args, obj.VSPTickID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`vsp_tick`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VSPTick")
	}

	var resultSlice []*VSPTick
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VSPTick")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vsp_tick")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vsp_tick")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VSPTick = foreign
		if foreign.R == nil {
			foreign.R = &vspTickR{}
		}
		foreign.R.VSPTickTimes = append(foreign.R.VSPTickTimes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VSPTickID == foreign.ID {
				local.R.VSPTick = foreign
				if foreign.R == nil {
					foreign.R = &vspTickR{}
				}
				foreign.R.VSPTickTimes = append(foreign.R.VSPTickTimes, local)
				break
			}
		}
	}

	return nil
}

// SetVSPTick of the vspTickTime to the related item.
// Sets o.R.VSPTick to related.
// Adds o to related.R.VSPTickTimes.
func (o *VSPTickTime) SetVSPTick(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VSPTick) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vsp_tick_time\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vsp_tick_id"}),
		strmangle.WhereClause("\"", "\"", 2, vspTickTimePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VSPTickID = related.ID
	if o.R == nil {
		o.R = &vspTickTimeR{
			VSPTick: related,
		}
	} else {
		o.R.VSPTick = related
	}

	if related.R == nil {
		related.R = &vspTickR{
			VSPTickTimes: VSPTickTimeSlice{o},
		}
	} else {
		related.R.VSPTickTimes = append(related.R.VSPTickTimes, o)
	}

	return nil
}

// VSPTickTimes retrieves all the records using an executor.
func VSPTickTimes(mods ...qm.QueryMod) vspTickTimeQuery {
	mods = append(mods, qm.From("\"vsp_tick_time\""))
	return vspTickTimeQuery{NewQuery(mods...)}
}

// FindVSPTickTime retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVSPTickTime(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*VSPTickTime, error) {
	vspTickTimeObj := &VSPTickTime{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vsp_tick_time\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, vspTickTimeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vsp_tick_time")
	}

	return vspTickTimeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VSPTickTime) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vsp_tick_time provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(vspTickTimeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vspTickTimeInsertCacheMut.RLock()
	cache, cached := vspTickTimeInsertCache[key]
	vspTickTimeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vspTickTimeColumns,
			vspTickTimeColumnsWithDefault,
			vspTickTimeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vspTickTimeType, vspTickTimeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vspTickTimeType, vspTickTimeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vsp_tick_time\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vsp_tick_time\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vsp_tick_time")
	}

	if !cached {
		vspTickTimeInsertCacheMut.Lock()
		vspTickTimeInsertCache[key] = cache
		vspTickTimeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the VSPTickTime.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VSPTickTime) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	vspTickTimeUpdateCacheMut.RLock()
	cache, cached := vspTickTimeUpdateCache[key]
	vspTickTimeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vspTickTimeColumns,
			vspTickTimePrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vsp_tick_time, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vsp_tick_time\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vspTickTimePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vspTickTimeType, vspTickTimeMapping, append(wl, vspTickTimePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vsp_tick_time row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vsp_tick_time")
	}

	if !cached {
		vspTickTimeUpdateCacheMut.Lock()
		vspTickTimeUpdateCache[key] = cache
		vspTickTimeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q vspTickTimeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vsp_tick_time")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vsp_tick_time")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VSPTickTimeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vspTickTimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vsp_tick_time\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vspTickTimePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vspTickTime slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vspTickTime")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VSPTickTime) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vsp_tick_time provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(vspTickTimeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vspTickTimeUpsertCacheMut.RLock()
	cache, cached := vspTickTimeUpsertCache[key]
	vspTickTimeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			vspTickTimeColumns,
			vspTickTimeColumnsWithDefault,
			vspTickTimeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			vspTickTimeColumns,
			vspTickTimePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vsp_tick_time, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(vspTickTimePrimaryKeyColumns))
			copy(conflict, vspTickTimePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vsp_tick_time\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(vspTickTimeType, vspTickTimeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vspTickTimeType, vspTickTimeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vsp_tick_time")
	}

	if !cached {
		vspTickTimeUpsertCacheMut.Lock()
		vspTickTimeUpsertCache[key] = cache
		vspTickTimeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single VSPTickTime record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VSPTickTime) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VSPTickTime provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vspTickTimePrimaryKeyMapping)
	sql := "DELETE FROM \"vsp_tick_time\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vsp_tick_time")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vsp_tick_time")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vspTickTimeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vspTickTimeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vsp_tick_time")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vsp_tick_time")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VSPTickTimeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VSPTickTime slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vspTickTimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vsp_tick_time\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vspTickTimePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vspTickTime slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vsp_tick_time")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VSPTickTime) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVSPTickTime(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VSPTickTimeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VSPTickTimeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vspTickTimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vsp_tick_time\".* FROM \"vsp_tick_time\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vspTickTimePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VSPTickTimeSlice")
	}

	*o = slice

	return nil
}

// VSPTickTimeExists checks if the VSPTickTime row exists.
func VSPTickTimeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vsp_tick_time\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vsp_tick_time exists")
	}

	return exists, nil
}
