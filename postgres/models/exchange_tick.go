// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ExchangeTick is an object representing the database table.
type ExchangeTick struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ExchangeID null.Int  `boil:"exchange_id" json:"exchange_id,omitempty" toml:"exchange_id" yaml:"exchange_id,omitempty"`
	High       float64   `boil:"high" json:"high" toml:"high" yaml:"high"`
	Low        float64   `boil:"low" json:"low" toml:"low" yaml:"low"`
	Open       float64   `boil:"open" json:"open" toml:"open" yaml:"open"`
	Close      float64   `boil:"close" json:"close" toml:"close" yaml:"close"`
	Time       time.Time `boil:"time" json:"time" toml:"time" yaml:"time"`

	R *exchangeTickR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L exchangeTickL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExchangeTickColumns = struct {
	ID         string
	ExchangeID string
	High       string
	Low        string
	Open       string
	Close      string
	Time       string
}{
	ID:         "id",
	ExchangeID: "exchange_id",
	High:       "high",
	Low:        "low",
	Open:       "open",
	Close:      "close",
	Time:       "time",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ExchangeTickWhere = struct {
	ID         whereHelperint
	ExchangeID whereHelpernull_Int
	High       whereHelperfloat64
	Low        whereHelperfloat64
	Open       whereHelperfloat64
	Close      whereHelperfloat64
	Time       whereHelpertime_Time
}{
	ID:         whereHelperint{field: `id`},
	ExchangeID: whereHelpernull_Int{field: `exchange_id`},
	High:       whereHelperfloat64{field: `high`},
	Low:        whereHelperfloat64{field: `low`},
	Open:       whereHelperfloat64{field: `open`},
	Close:      whereHelperfloat64{field: `close`},
	Time:       whereHelpertime_Time{field: `time`},
}

// ExchangeTickRels is where relationship names are stored.
var ExchangeTickRels = struct {
	Exchange string
}{
	Exchange: "Exchange",
}

// exchangeTickR is where relationships are stored.
type exchangeTickR struct {
	Exchange *Exchange
}

// NewStruct creates a new relationship struct
func (*exchangeTickR) NewStruct() *exchangeTickR {
	return &exchangeTickR{}
}

// exchangeTickL is where Load methods for each relationship are stored.
type exchangeTickL struct{}

var (
	exchangeTickColumns               = []string{"id", "exchange_id", "high", "low", "open", "close", "time"}
	exchangeTickColumnsWithoutDefault = []string{"exchange_id", "high", "low", "open", "close", "time"}
	exchangeTickColumnsWithDefault    = []string{"id"}
	exchangeTickPrimaryKeyColumns     = []string{"id"}
)

type (
	// ExchangeTickSlice is an alias for a slice of pointers to ExchangeTick.
	// This should generally be used opposed to []ExchangeTick.
	ExchangeTickSlice []*ExchangeTick

	exchangeTickQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	exchangeTickType                 = reflect.TypeOf(&ExchangeTick{})
	exchangeTickMapping              = queries.MakeStructMapping(exchangeTickType)
	exchangeTickPrimaryKeyMapping, _ = queries.BindMapping(exchangeTickType, exchangeTickMapping, exchangeTickPrimaryKeyColumns)
	exchangeTickInsertCacheMut       sync.RWMutex
	exchangeTickInsertCache          = make(map[string]insertCache)
	exchangeTickUpdateCacheMut       sync.RWMutex
	exchangeTickUpdateCache          = make(map[string]updateCache)
	exchangeTickUpsertCacheMut       sync.RWMutex
	exchangeTickUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single exchangeTick record from the query using the global executor.
func (q exchangeTickQuery) OneG() (*ExchangeTick, error) {
	return q.One(boil.GetDB())
}

// One returns a single exchangeTick record from the query.
func (q exchangeTickQuery) One(exec boil.Executor) (*ExchangeTick, error) {
	o := &ExchangeTick{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for exchange_tick")
	}

	return o, nil
}

// AllG returns all ExchangeTick records from the query using the global executor.
func (q exchangeTickQuery) AllG() (ExchangeTickSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all ExchangeTick records from the query.
func (q exchangeTickQuery) All(exec boil.Executor) (ExchangeTickSlice, error) {
	var o []*ExchangeTick

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExchangeTick slice")
	}

	return o, nil
}

// CountG returns the count of all ExchangeTick records in the query, and panics on error.
func (q exchangeTickQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all ExchangeTick records in the query.
func (q exchangeTickQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count exchange_tick rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q exchangeTickQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q exchangeTickQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if exchange_tick exists")
	}

	return count > 0, nil
}

// Exchange pointed to by the foreign key.
func (o *ExchangeTick) Exchange(mods ...qm.QueryMod) exchangeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ExchangeID),
	}

	queryMods = append(queryMods, mods...)

	query := Exchanges(queryMods...)
	queries.SetFrom(query.Query, "\"exchange\"")

	return query
}

// LoadExchange allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (exchangeTickL) LoadExchange(e boil.Executor, singular bool, maybeExchangeTick interface{}, mods queries.Applicator) error {
	var slice []*ExchangeTick
	var object *ExchangeTick

	if singular {
		object = maybeExchangeTick.(*ExchangeTick)
	} else {
		slice = *maybeExchangeTick.(*[]*ExchangeTick)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &exchangeTickR{}
		}
		if !queries.IsNil(object.ExchangeID) {
			args = append(args, object.ExchangeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &exchangeTickR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ExchangeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ExchangeID) {
				args = append(args, obj.ExchangeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`exchange`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Exchange")
	}

	var resultSlice []*Exchange
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Exchange")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for exchange")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exchange")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Exchange = foreign
		if foreign.R == nil {
			foreign.R = &exchangeR{}
		}
		foreign.R.ExchangeTicks = append(foreign.R.ExchangeTicks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ExchangeID, foreign.ID) {
				local.R.Exchange = foreign
				if foreign.R == nil {
					foreign.R = &exchangeR{}
				}
				foreign.R.ExchangeTicks = append(foreign.R.ExchangeTicks, local)
				break
			}
		}
	}

	return nil
}

// SetExchangeG of the exchangeTick to the related item.
// Sets o.R.Exchange to related.
// Adds o to related.R.ExchangeTicks.
// Uses the global database handle.
func (o *ExchangeTick) SetExchangeG(insert bool, related *Exchange) error {
	return o.SetExchange(boil.GetDB(), insert, related)
}

// SetExchange of the exchangeTick to the related item.
// Sets o.R.Exchange to related.
// Adds o to related.R.ExchangeTicks.
func (o *ExchangeTick) SetExchange(exec boil.Executor, insert bool, related *Exchange) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"exchange_tick\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"exchange_id"}),
		strmangle.WhereClause("\"", "\"", 2, exchangeTickPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ExchangeID, related.ID)
	if o.R == nil {
		o.R = &exchangeTickR{
			Exchange: related,
		}
	} else {
		o.R.Exchange = related
	}

	if related.R == nil {
		related.R = &exchangeR{
			ExchangeTicks: ExchangeTickSlice{o},
		}
	} else {
		related.R.ExchangeTicks = append(related.R.ExchangeTicks, o)
	}

	return nil
}

// RemoveExchangeG relationship.
// Sets o.R.Exchange to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *ExchangeTick) RemoveExchangeG(related *Exchange) error {
	return o.RemoveExchange(boil.GetDB(), related)
}

// RemoveExchange relationship.
// Sets o.R.Exchange to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ExchangeTick) RemoveExchange(exec boil.Executor, related *Exchange) error {
	var err error

	queries.SetScanner(&o.ExchangeID, nil)
	if _, err = o.Update(exec, boil.Whitelist("exchange_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Exchange = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ExchangeTicks {
		if queries.Equal(o.ExchangeID, ri.ExchangeID) {
			continue
		}

		ln := len(related.R.ExchangeTicks)
		if ln > 1 && i < ln-1 {
			related.R.ExchangeTicks[i] = related.R.ExchangeTicks[ln-1]
		}
		related.R.ExchangeTicks = related.R.ExchangeTicks[:ln-1]
		break
	}
	return nil
}

// ExchangeTicks retrieves all the records using an executor.
func ExchangeTicks(mods ...qm.QueryMod) exchangeTickQuery {
	mods = append(mods, qm.From("\"exchange_tick\""))
	return exchangeTickQuery{NewQuery(mods...)}
}

// FindExchangeTickG retrieves a single record by ID.
func FindExchangeTickG(iD int, selectCols ...string) (*ExchangeTick, error) {
	return FindExchangeTick(boil.GetDB(), iD, selectCols...)
}

// FindExchangeTick retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExchangeTick(exec boil.Executor, iD int, selectCols ...string) (*ExchangeTick, error) {
	exchangeTickObj := &ExchangeTick{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"exchange_tick\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, exchangeTickObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from exchange_tick")
	}

	return exchangeTickObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ExchangeTick) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExchangeTick) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no exchange_tick provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(exchangeTickColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	exchangeTickInsertCacheMut.RLock()
	cache, cached := exchangeTickInsertCache[key]
	exchangeTickInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			exchangeTickColumns,
			exchangeTickColumnsWithDefault,
			exchangeTickColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(exchangeTickType, exchangeTickMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(exchangeTickType, exchangeTickMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"exchange_tick\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"exchange_tick\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into exchange_tick")
	}

	if !cached {
		exchangeTickInsertCacheMut.Lock()
		exchangeTickInsertCache[key] = cache
		exchangeTickInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single ExchangeTick record using the global executor.
// See Update for more documentation.
func (o *ExchangeTick) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the ExchangeTick.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExchangeTick) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	exchangeTickUpdateCacheMut.RLock()
	cache, cached := exchangeTickUpdateCache[key]
	exchangeTickUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			exchangeTickColumns,
			exchangeTickPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update exchange_tick, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"exchange_tick\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, exchangeTickPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(exchangeTickType, exchangeTickMapping, append(wl, exchangeTickPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update exchange_tick row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for exchange_tick")
	}

	if !cached {
		exchangeTickUpdateCacheMut.Lock()
		exchangeTickUpdateCache[key] = cache
		exchangeTickUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q exchangeTickQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q exchangeTickQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for exchange_tick")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for exchange_tick")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ExchangeTickSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExchangeTickSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeTickPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"exchange_tick\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, exchangeTickPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in exchangeTick slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all exchangeTick")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ExchangeTick) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ExchangeTick) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no exchange_tick provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(exchangeTickColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	exchangeTickUpsertCacheMut.RLock()
	cache, cached := exchangeTickUpsertCache[key]
	exchangeTickUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			exchangeTickColumns,
			exchangeTickColumnsWithDefault,
			exchangeTickColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			exchangeTickColumns,
			exchangeTickPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert exchange_tick, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(exchangeTickPrimaryKeyColumns))
			copy(conflict, exchangeTickPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"exchange_tick\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(exchangeTickType, exchangeTickMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(exchangeTickType, exchangeTickMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert exchange_tick")
	}

	if !cached {
		exchangeTickUpsertCacheMut.Lock()
		exchangeTickUpsertCache[key] = cache
		exchangeTickUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single ExchangeTick record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ExchangeTick) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single ExchangeTick record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExchangeTick) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExchangeTick provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), exchangeTickPrimaryKeyMapping)
	sql := "DELETE FROM \"exchange_tick\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from exchange_tick")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for exchange_tick")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q exchangeTickQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no exchangeTickQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exchange_tick")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exchange_tick")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ExchangeTickSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExchangeTickSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExchangeTick slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeTickPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"exchange_tick\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, exchangeTickPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exchangeTick slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exchange_tick")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ExchangeTick) ReloadG() error {
	if o == nil {
		return errors.New("models: no ExchangeTick provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExchangeTick) Reload(exec boil.Executor) error {
	ret, err := FindExchangeTick(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExchangeTickSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ExchangeTickSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExchangeTickSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExchangeTickSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeTickPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"exchange_tick\".* FROM \"exchange_tick\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, exchangeTickPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExchangeTickSlice")
	}

	*o = slice

	return nil
}

// ExchangeTickExistsG checks if the ExchangeTick row exists.
func ExchangeTickExistsG(iD int) (bool, error) {
	return ExchangeTickExists(boil.GetDB(), iD)
}

// ExchangeTickExists checks if the ExchangeTick row exists.
func ExchangeTickExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"exchange_tick\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if exchange_tick exists")
	}

	return exists, nil
}
