// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("ChartData", testChartData)
	t.Run("Data", testData)
	t.Run("HistoricData", testHistoricData)
	t.Run("Posdatatables", testPosdatatables)
	t.Run("Powdatatables", testPowdatatables)
}

func TestDelete(t *testing.T) {
	t.Run("ChartData", testChartDataDelete)
	t.Run("Data", testDataDelete)
	t.Run("HistoricData", testHistoricDataDelete)
	t.Run("Posdatatables", testPosdatatablesDelete)
	t.Run("Powdatatables", testPowdatatablesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("ChartData", testChartDataQueryDeleteAll)
	t.Run("Data", testDataQueryDeleteAll)
	t.Run("HistoricData", testHistoricDataQueryDeleteAll)
	t.Run("Posdatatables", testPosdatatablesQueryDeleteAll)
	t.Run("Powdatatables", testPowdatatablesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("ChartData", testChartDataSliceDeleteAll)
	t.Run("Data", testDataSliceDeleteAll)
	t.Run("HistoricData", testHistoricDataSliceDeleteAll)
	t.Run("Posdatatables", testPosdatatablesSliceDeleteAll)
	t.Run("Powdatatables", testPowdatatablesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("ChartData", testChartDataExists)
	t.Run("Data", testDataExists)
	t.Run("HistoricData", testHistoricDataExists)
	t.Run("Posdatatables", testPosdatatablesExists)
	t.Run("Powdatatables", testPowdatatablesExists)
}

func TestFind(t *testing.T) {
	t.Run("ChartData", testChartDataFind)
	t.Run("Data", testDataFind)
	t.Run("HistoricData", testHistoricDataFind)
	t.Run("Posdatatables", testPosdatatablesFind)
	t.Run("Powdatatables", testPowdatatablesFind)
}

func TestBind(t *testing.T) {
	t.Run("ChartData", testChartDataBind)
	t.Run("Data", testDataBind)
	t.Run("HistoricData", testHistoricDataBind)
	t.Run("Posdatatables", testPosdatatablesBind)
	t.Run("Powdatatables", testPowdatatablesBind)
}

func TestOne(t *testing.T) {
	t.Run("ChartData", testChartDataOne)
	t.Run("Data", testDataOne)
	t.Run("HistoricData", testHistoricDataOne)
	t.Run("Posdatatables", testPosdatatablesOne)
	t.Run("Powdatatables", testPowdatatablesOne)
}

func TestAll(t *testing.T) {
	t.Run("ChartData", testChartDataAll)
	t.Run("Data", testDataAll)
	t.Run("HistoricData", testHistoricDataAll)
	t.Run("Posdatatables", testPosdatatablesAll)
	t.Run("Powdatatables", testPowdatatablesAll)
}

func TestCount(t *testing.T) {
	t.Run("ChartData", testChartDataCount)
	t.Run("Data", testDataCount)
	t.Run("HistoricData", testHistoricDataCount)
	t.Run("Posdatatables", testPosdatatablesCount)
	t.Run("Powdatatables", testPowdatatablesCount)
}

func TestHooks(t *testing.T) {
	t.Run("ChartData", testChartDataHooks)
	t.Run("Data", testDataHooks)
	t.Run("HistoricData", testHistoricDataHooks)
	t.Run("Posdatatables", testPosdatatablesHooks)
	t.Run("Powdatatables", testPowdatatablesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("ChartData", testChartDataInsert)
	t.Run("ChartData", testChartDataInsertWhitelist)
	t.Run("Data", testDataInsert)
	t.Run("Data", testDataInsertWhitelist)
	t.Run("HistoricData", testHistoricDataInsert)
	t.Run("HistoricData", testHistoricDataInsertWhitelist)
	t.Run("Posdatatables", testPosdatatablesInsert)
	t.Run("Posdatatables", testPosdatatablesInsertWhitelist)
	t.Run("Powdatatables", testPowdatatablesInsert)
	t.Run("Powdatatables", testPowdatatablesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("ChartData", testChartDataReload)
	t.Run("Data", testDataReload)
	t.Run("HistoricData", testHistoricDataReload)
	t.Run("Posdatatables", testPosdatatablesReload)
	t.Run("Powdatatables", testPowdatatablesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("ChartData", testChartDataReloadAll)
	t.Run("Data", testDataReloadAll)
	t.Run("HistoricData", testHistoricDataReloadAll)
	t.Run("Posdatatables", testPosdatatablesReloadAll)
	t.Run("Powdatatables", testPowdatatablesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("ChartData", testChartDataSelect)
	t.Run("Data", testDataSelect)
	t.Run("HistoricData", testHistoricDataSelect)
	t.Run("Posdatatables", testPosdatatablesSelect)
	t.Run("Powdatatables", testPowdatatablesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("ChartData", testChartDataUpdate)
	t.Run("Data", testDataUpdate)
	t.Run("HistoricData", testHistoricDataUpdate)
	t.Run("Posdatatables", testPosdatatablesUpdate)
	t.Run("Powdatatables", testPowdatatablesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("ChartData", testChartDataSliceUpdateAll)
	t.Run("Data", testDataSliceUpdateAll)
	t.Run("HistoricData", testHistoricDataSliceUpdateAll)
	t.Run("Posdatatables", testPosdatatablesSliceUpdateAll)
	t.Run("Powdatatables", testPowdatatablesSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("ChartData", testChartDataUpsert)
	t.Run("Data", testDataUpsert)
	t.Run("HistoricData", testHistoricDataUpsert)
	t.Run("Posdatatables", testPosdatatablesUpsert)
	t.Run("Powdatatables", testPowdatatablesUpsert)
}
