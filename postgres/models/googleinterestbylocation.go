// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Googleinterestbylocation is an object representing the database table.
type Googleinterestbylocation struct {
	ID            int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Geo           string    `boil:"geo" json:"geo" toml:"geo" yaml:"geo"`
	GeoCode       string    `boil:"geo_code" json:"geo_code" toml:"geo_code" yaml:"geo_code"`
	GeoName       string    `boil:"geo_name" json:"geo_name" toml:"geo_name" yaml:"geo_name"`
	Value         int       `boil:"value" json:"value" toml:"value" yaml:"value"`
	MaxValueIndex int       `boil:"max_value_index" json:"max_value_index" toml:"max_value_index" yaml:"max_value_index"`
	Keyword       string    `boil:"keyword" json:"keyword" toml:"keyword" yaml:"keyword"`
	Date          time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`

	R *googleinterestbylocationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L googleinterestbylocationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GoogleinterestbylocationColumns = struct {
	ID            string
	Geo           string
	GeoCode       string
	GeoName       string
	Value         string
	MaxValueIndex string
	Keyword       string
	Date          string
}{
	ID:            "id",
	Geo:           "geo",
	GeoCode:       "geo_code",
	GeoName:       "geo_name",
	Value:         "value",
	MaxValueIndex: "max_value_index",
	Keyword:       "keyword",
	Date:          "date",
}

// Generated where

var GoogleinterestbylocationWhere = struct {
	ID            whereHelperint
	Geo           whereHelperstring
	GeoCode       whereHelperstring
	GeoName       whereHelperstring
	Value         whereHelperint
	MaxValueIndex whereHelperint
	Keyword       whereHelperstring
	Date          whereHelpertime_Time
}{
	ID:            whereHelperint{field: "\"googleinterestbylocation\".\"id\""},
	Geo:           whereHelperstring{field: "\"googleinterestbylocation\".\"geo\""},
	GeoCode:       whereHelperstring{field: "\"googleinterestbylocation\".\"geo_code\""},
	GeoName:       whereHelperstring{field: "\"googleinterestbylocation\".\"geo_name\""},
	Value:         whereHelperint{field: "\"googleinterestbylocation\".\"value\""},
	MaxValueIndex: whereHelperint{field: "\"googleinterestbylocation\".\"max_value_index\""},
	Keyword:       whereHelperstring{field: "\"googleinterestbylocation\".\"keyword\""},
	Date:          whereHelpertime_Time{field: "\"googleinterestbylocation\".\"date\""},
}

// GoogleinterestbylocationRels is where relationship names are stored.
var GoogleinterestbylocationRels = struct {
}{}

// googleinterestbylocationR is where relationships are stored.
type googleinterestbylocationR struct {
}

// NewStruct creates a new relationship struct
func (*googleinterestbylocationR) NewStruct() *googleinterestbylocationR {
	return &googleinterestbylocationR{}
}

// googleinterestbylocationL is where Load methods for each relationship are stored.
type googleinterestbylocationL struct{}

var (
	googleinterestbylocationAllColumns            = []string{"id", "geo", "geo_code", "geo_name", "value", "max_value_index", "keyword", "date"}
	googleinterestbylocationColumnsWithoutDefault = []string{"geo", "geo_code", "geo_name", "value", "max_value_index", "keyword", "date"}
	googleinterestbylocationColumnsWithDefault    = []string{"id"}
	googleinterestbylocationPrimaryKeyColumns     = []string{"id"}
)

type (
	// GoogleinterestbylocationSlice is an alias for a slice of pointers to Googleinterestbylocation.
	// This should generally be used opposed to []Googleinterestbylocation.
	GoogleinterestbylocationSlice []*Googleinterestbylocation

	googleinterestbylocationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	googleinterestbylocationType                 = reflect.TypeOf(&Googleinterestbylocation{})
	googleinterestbylocationMapping              = queries.MakeStructMapping(googleinterestbylocationType)
	googleinterestbylocationPrimaryKeyMapping, _ = queries.BindMapping(googleinterestbylocationType, googleinterestbylocationMapping, googleinterestbylocationPrimaryKeyColumns)
	googleinterestbylocationInsertCacheMut       sync.RWMutex
	googleinterestbylocationInsertCache          = make(map[string]insertCache)
	googleinterestbylocationUpdateCacheMut       sync.RWMutex
	googleinterestbylocationUpdateCache          = make(map[string]updateCache)
	googleinterestbylocationUpsertCacheMut       sync.RWMutex
	googleinterestbylocationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single googleinterestbylocation record from the query.
func (q googleinterestbylocationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Googleinterestbylocation, error) {
	o := &Googleinterestbylocation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for googleinterestbylocation")
	}

	return o, nil
}

// All returns all Googleinterestbylocation records from the query.
func (q googleinterestbylocationQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoogleinterestbylocationSlice, error) {
	var o []*Googleinterestbylocation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Googleinterestbylocation slice")
	}

	return o, nil
}

// Count returns the count of all Googleinterestbylocation records in the query.
func (q googleinterestbylocationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count googleinterestbylocation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q googleinterestbylocationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if googleinterestbylocation exists")
	}

	return count > 0, nil
}

// Googleinterestbylocations retrieves all the records using an executor.
func Googleinterestbylocations(mods ...qm.QueryMod) googleinterestbylocationQuery {
	mods = append(mods, qm.From("\"googleinterestbylocation\""))
	return googleinterestbylocationQuery{NewQuery(mods...)}
}

// FindGoogleinterestbylocation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGoogleinterestbylocation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Googleinterestbylocation, error) {
	googleinterestbylocationObj := &Googleinterestbylocation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"googleinterestbylocation\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, googleinterestbylocationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from googleinterestbylocation")
	}

	return googleinterestbylocationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Googleinterestbylocation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no googleinterestbylocation provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(googleinterestbylocationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	googleinterestbylocationInsertCacheMut.RLock()
	cache, cached := googleinterestbylocationInsertCache[key]
	googleinterestbylocationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			googleinterestbylocationAllColumns,
			googleinterestbylocationColumnsWithDefault,
			googleinterestbylocationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(googleinterestbylocationType, googleinterestbylocationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(googleinterestbylocationType, googleinterestbylocationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"googleinterestbylocation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"googleinterestbylocation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into googleinterestbylocation")
	}

	if !cached {
		googleinterestbylocationInsertCacheMut.Lock()
		googleinterestbylocationInsertCache[key] = cache
		googleinterestbylocationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Googleinterestbylocation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Googleinterestbylocation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	googleinterestbylocationUpdateCacheMut.RLock()
	cache, cached := googleinterestbylocationUpdateCache[key]
	googleinterestbylocationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			googleinterestbylocationAllColumns,
			googleinterestbylocationPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update googleinterestbylocation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"googleinterestbylocation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, googleinterestbylocationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(googleinterestbylocationType, googleinterestbylocationMapping, append(wl, googleinterestbylocationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update googleinterestbylocation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for googleinterestbylocation")
	}

	if !cached {
		googleinterestbylocationUpdateCacheMut.Lock()
		googleinterestbylocationUpdateCache[key] = cache
		googleinterestbylocationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q googleinterestbylocationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for googleinterestbylocation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for googleinterestbylocation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GoogleinterestbylocationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googleinterestbylocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"googleinterestbylocation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, googleinterestbylocationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in googleinterestbylocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all googleinterestbylocation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Googleinterestbylocation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no googleinterestbylocation provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(googleinterestbylocationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	googleinterestbylocationUpsertCacheMut.RLock()
	cache, cached := googleinterestbylocationUpsertCache[key]
	googleinterestbylocationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			googleinterestbylocationAllColumns,
			googleinterestbylocationColumnsWithDefault,
			googleinterestbylocationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			googleinterestbylocationAllColumns,
			googleinterestbylocationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert googleinterestbylocation, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(googleinterestbylocationPrimaryKeyColumns))
			copy(conflict, googleinterestbylocationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"googleinterestbylocation\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(googleinterestbylocationType, googleinterestbylocationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(googleinterestbylocationType, googleinterestbylocationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert googleinterestbylocation")
	}

	if !cached {
		googleinterestbylocationUpsertCacheMut.Lock()
		googleinterestbylocationUpsertCache[key] = cache
		googleinterestbylocationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Googleinterestbylocation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Googleinterestbylocation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Googleinterestbylocation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), googleinterestbylocationPrimaryKeyMapping)
	sql := "DELETE FROM \"googleinterestbylocation\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from googleinterestbylocation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for googleinterestbylocation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q googleinterestbylocationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no googleinterestbylocationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from googleinterestbylocation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for googleinterestbylocation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GoogleinterestbylocationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googleinterestbylocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"googleinterestbylocation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, googleinterestbylocationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from googleinterestbylocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for googleinterestbylocation")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Googleinterestbylocation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGoogleinterestbylocation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoogleinterestbylocationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GoogleinterestbylocationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), googleinterestbylocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"googleinterestbylocation\".* FROM \"googleinterestbylocation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, googleinterestbylocationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GoogleinterestbylocationSlice")
	}

	*o = slice

	return nil
}

// GoogleinterestbylocationExists checks if the Googleinterestbylocation row exists.
func GoogleinterestbylocationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"googleinterestbylocation\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if googleinterestbylocation exists")
	}

	return exists, nil
}
